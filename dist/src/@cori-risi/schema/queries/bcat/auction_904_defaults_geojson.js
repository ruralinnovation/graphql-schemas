"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const geojson_1 = require("../../types/geojson");
const type_1 = require("graphql/type");
// TODO: Remove after testing call to local Python REST API
const cross_fetch_1 = require("cross-fetch");
const auction_904_defaults_geojson = {
    type: geojson_1.default.FeatureCollectionObject,
    args: {
        geoid_co: {
            type: type_1.GraphQLString,
        },
        geoid_bl: {
            type: new type_1.GraphQLList(type_1.GraphQLString),
        },
        limit: {
            type: type_1.GraphQLInt
        },
        offset: {
            type: type_1.GraphQLInt
        },
        page: {
            type: type_1.GraphQLInt
        },
        skipCache: {
            type: type_1.GraphQLBoolean,
        },
    },
    resolve: async (_, { geoid_co, geoid_bl, limit, offset, page, skipCache }, { dataSources: { restApi }, redisClient }, info) => {
        const geoids = (typeof geoid_bl !== 'undefined' && geoid_bl !== null && geoid_bl.length > 0) ?
            geoid_bl.map(c => c.toString()).join(",") :
            "";
        const page_size = (typeof limit !== 'undefined' && limit === limit) ?
            limit :
            10;
        const count_offset = (typeof offset !== 'undefined' && offset === offset) ?
            offset :
            0;
        const page_number = (typeof page !== 'undefined' && page === page) ?
            page :
            0;
        if (typeof redisClient !== "undefined" && !!skipCache && typeof redisClient.disconnect === 'function') {
            // Disconnect from redis when ever skipCache == true
            console.log("Disconnect from redis when ever skipCache == true");
            redisClient.disconnect();
        }
        // TODO: Remove after testing call to local Python REST API
        console.log(`Query restApi: ${restApi.baseURL}/bcat/auction_904_defaults/geojson`
            + `?geoid_co=${geoid_co}` + ((!!geoids) ? `&geoid_bl=${geoids}` : ``)
            + `&limit=${page_size}&offset=${count_offset}&page=${page_number}`);
        const test_req = (0, cross_fetch_1.fetch)(`${restApi.baseURL}/bcat/auction_904_defaults/geojson`
            + `?geoid_co=${geoid_co}` + ((!!geoids) ? `&geoid_bl=${geoids}` : ``)
            + `&limit=${page_size}&offset=${count_offset}&page=${page_number}`);
        test_req
            .catch((err) => console.log("Test Python REST error: ", err))
            .then((res) => console.log("Test Python REST response: ", res));
        const check_res = await test_req;
        console.log(test_req);
        return (typeof redisClient === "undefined" || !!skipCache)
            ? await restApi.getItem(`/bcat/auction_904_defaults/geojson`
                + `?geoid_co=${geoid_co}` + ((!!geoids) ? `&geoid_bl=${geoids}` : ``)
                + `&limit=${page_size}&offset=${count_offset}&page=${page_number}`)
            : await redisClient.checkCache(`auction_904_defaults-`
                + `${geoid_co}` + ((!!geoids) ? `-${geoids}` : ``) + `-${page_size}-${count_offset}-${page_number}`, async () => {
                return await restApi.getItem(`/bcat/auction_904_defaults/geojson`
                    + `?geoid_co=${geoid_co}` + ((!!geoids) ? `&geoid_bl=${geoids}` : ``)
                    + `&limit=${page_size}&offset=${count_offset}&page=${page_number}`);
            });
    },
};
exports.default = auction_904_defaults_geojson;
//# sourceMappingURL=data:application/json;base64,