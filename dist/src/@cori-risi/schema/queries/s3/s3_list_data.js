"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("graphql/type");
const definition_1 = require("graphql/type/definition");
const types_1 = require("../../types");
const S3ListData_1 = require("./S3ListData");
const s3_list_data = {
    type: new type_1.GraphQLObjectType({
        name: 'S3ListData',
        fields: () => ({
            list: { type: new definition_1.GraphQLNonNull(new definition_1.GraphQLList(new definition_1.GraphQLNonNull(types_1.JSONObject))) },
            test: { type: types_1.JSONObject }, // <-- object containing results of all tests
            // <-- run by the resolver stored as:
            // <-- { "test description": true | false }
            type: { type: type_1.GraphQLString }
        })
    }),
    args: {
        bucket: {
            type: type_1.GraphQLString //new GraphQLList(GraphQLString)!,
        },
        container_name: {
            type: type_1.GraphQLString
        }
    },
    resolve: async (_, { bucket, container_name }, { dataSources: { restApi, s3DataSource } }, info) => {
        console.log("Resolve S3ListData...", {
            restApi,
            s3DataSource
        });
        // return ({
        //     "type": "s3_list_data",
        //     "list": [],
        //     "test": test
        // });
        const Bucket = (!!bucket && bucket.length > 0) ?
            "cori-risi-apps" :
            bucket;
        console.log("BUCKET:", Bucket);
        console.log("bucket:", bucket);
        console.log("container_name:", container_name);
        return (!!container_name && container_name.length > 0) ?
            (await (0, S3ListData_1.default)(Bucket, container_name)) :
            (await (0, S3ListData_1.default)(Bucket));
    }
};
exports.default = s3_list_data;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfbGlzdF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL0Bjb3JpLXJpc2kvc2NoZW1hL3F1ZXJpZXMvczMvczNfbGlzdF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXlHO0FBQ3pHLHdEQUF5RjtBQUN6Rix1Q0FBeUM7QUFDekMsNkNBQXNDO0FBRXRDLE1BQU0sWUFBWSxHQUFHO0lBQ2pCLElBQUksRUFBRSxJQUFJLHdCQUFpQixDQUFDO1FBQ3hCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksMkJBQU8sQ0FBQyxJQUFJLHdCQUFJLENBQUMsSUFBSSwyQkFBTyxDQUFDLGtCQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFVLEVBQUUsRUFBRSw2Q0FBNkM7WUFDN0MscUNBQXFDO1lBQ3JDLDJDQUEyQztZQUN2RSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsb0JBQWEsRUFBRTtTQUNoQyxDQUFDO0tBQ0wsQ0FBQztJQUNGLElBQUksRUFBRTtRQUNGLE1BQU0sRUFBRTtZQUNKLElBQUksRUFBRSxvQkFBYSxDQUFDLGtDQUFrQztTQUN6RDtRQUNELGNBQWMsRUFBRTtZQUNaLElBQUksRUFBRSxvQkFBYTtTQUN0QjtLQUNKO0lBQ0QsT0FBTyxFQUFFLEtBQUssRUFDWixDQUFNLEVBQ04sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUd2QixFQUNELEVBQ0ksV0FBVyxFQUFFLEVBQ1QsT0FBTyxFQUNQLFlBQVksRUFDZixFQUNDLEVBQ04sSUFBUyxFQUNULEVBQUU7UUFFQSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFO1lBQ2pDLE9BQU87WUFDUCxZQUFZO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsWUFBWTtRQUNaLDhCQUE4QjtRQUM5QixrQkFBa0I7UUFDbEIsbUJBQW1CO1FBQ25CLE1BQU07UUFFTixNQUFNLE1BQU0sR0FBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzlDLGdCQUFnQixDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDO1FBRVQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUUvQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDckQsQ0FBQyxNQUFNLElBQUEsb0JBQVUsRUFBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLENBQUMsTUFBTSxJQUFBLG9CQUFVLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVqQyxDQUFDO0NBQ0osQ0FBQztBQUVGLGtCQUFlLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxCb29sZWFuLCBHcmFwaFFMSW50LCBHcmFwaFFMTGlzdCwgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxTdHJpbmcgfSBmcm9tIFwiZ3JhcGhxbC90eXBlXCI7XG5pbXBvcnQgeyBHcmFwaFFMTGlzdCBhcyBMaXN0LCBHcmFwaFFMTm9uTnVsbCBhcyBOb25OdWxsIH0gZnJvbSBcImdyYXBocWwvdHlwZS9kZWZpbml0aW9uXCI7XG5pbXBvcnQgeyBKU09OT2JqZWN0IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgUzNMaXN0RGF0YSBmcm9tIFwiLi9TM0xpc3REYXRhXCI7XG5cbmNvbnN0IHMzX2xpc3RfZGF0YSA9IHtcbiAgICB0eXBlOiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICAgICAgICBuYW1lOiAnUzNMaXN0RGF0YScsXG4gICAgICAgIGZpZWxkczogKCkgPT4gKHtcbiAgICAgICAgICAgIGxpc3Q6IHsgdHlwZTogbmV3IE5vbk51bGwobmV3IExpc3QobmV3IE5vbk51bGwoSlNPTk9iamVjdCkpKSB9LFxuICAgICAgICAgICAgdGVzdDogeyB0eXBlOiBKU09OT2JqZWN0IH0sIC8vIDwtLSBvYmplY3QgY29udGFpbmluZyByZXN1bHRzIG9mIGFsbCB0ZXN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtLSBydW4gYnkgdGhlIHJlc29sdmVyIHN0b3JlZCBhczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LS0geyBcInRlc3QgZGVzY3JpcHRpb25cIjogdHJ1ZSB8IGZhbHNlIH1cbiAgICAgICAgICAgIHR5cGU6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9XG4gICAgICAgIH0pXG4gICAgfSksXG4gICAgYXJnczoge1xuICAgICAgICBidWNrZXQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcgLy9uZXcgR3JhcGhRTExpc3QoR3JhcGhRTFN0cmluZykhLFxuICAgICAgICB9LFxuICAgICAgICBjb250YWluZXJfbmFtZToge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZ1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZXNvbHZlOiBhc3luYyAoXG4gICAgICBfOiBhbnksXG4gICAgICB7IGJ1Y2tldCwgY29udGFpbmVyX25hbWUgfToge1xuICAgICAgICAgIGJ1Y2tldDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGNvbnRhaW5lcl9uYW1lOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICAgZGF0YVNvdXJjZXM6IHtcbiAgICAgICAgICAgICAgcmVzdEFwaSxcbiAgICAgICAgICAgICAgczNEYXRhU291cmNlXG4gICAgICAgICAgfVxuICAgICAgfTogYW55LFxuICAgICAgaW5mbzogYW55XG4gICAgKSA9PiAge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVzb2x2ZSBTM0xpc3REYXRhLi4uXCIsIHtcbiAgICAgICAgICAgIHJlc3RBcGksXG4gICAgICAgICAgICBzM0RhdGFTb3VyY2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmV0dXJuICh7XG4gICAgICAgIC8vICAgICBcInR5cGVcIjogXCJzM19saXN0X2RhdGFcIixcbiAgICAgICAgLy8gICAgIFwibGlzdFwiOiBbXSxcbiAgICAgICAgLy8gICAgIFwidGVzdFwiOiB0ZXN0XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIGNvbnN0IEJ1Y2tldCA9ICAoISFidWNrZXQgJiYgYnVja2V0Lmxlbmd0aCA+IDApP1xuICAgICAgICAgIFwiY29yaS1yaXNpLWFwcHNcIiA6XG4gICAgICAgICAgYnVja2V0O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQlVDS0VUOlwiLCBCdWNrZXQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImJ1Y2tldDpcIiwgYnVja2V0KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb250YWluZXJfbmFtZTpcIiwgY29udGFpbmVyX25hbWUpO1xuXG4gICAgICAgIHJldHVybiAoISFjb250YWluZXJfbmFtZSAmJiBjb250YWluZXJfbmFtZS5sZW5ndGggPiAwKT9cbiAgICAgICAgICAoYXdhaXQgUzNMaXN0RGF0YShCdWNrZXQsIGNvbnRhaW5lcl9uYW1lKSkgOlxuICAgICAgICAgIChhd2FpdCBTM0xpc3REYXRhKEJ1Y2tldCkpO1xuXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgczNfbGlzdF9kYXRhO1xuIl19