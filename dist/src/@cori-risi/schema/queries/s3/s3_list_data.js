"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("graphql/type");
const definition_1 = require("graphql/type/definition");
const types_1 = require("../../types");
const S3ListData_1 = require("./S3ListData");
const s3_list_data = {
    type: new type_1.GraphQLObjectType({
        name: 'S3ListData',
        fields: () => ({
            list: { type: new definition_1.GraphQLNonNull(new definition_1.GraphQLList(new definition_1.GraphQLNonNull(types_1.JSONObject))) },
            test: { type: types_1.JSONObject }, // <-- object containing results of all tests
            // <-- run by the resolver stored as:
            // <-- { "test description": true | false }
            type: { type: type_1.GraphQLString }
        })
    }),
    args: {
        bucket: {
            type: type_1.GraphQLString //new GraphQLList(GraphQLString)!,
        },
        container_name: {
            type: type_1.GraphQLString
        }
    },
    resolve: async (_, { bucket, container_name }, { dataSources: { restApi, s3DataSource } }, info) => {
        console.log("Resolve S3ListData...", {
            restApi,
            s3DataSource
        });
        // return ({
        //     "type": "s3_list_data",
        //     "list": [],
        //     "test": test
        // });
        const Bucket = (!!bucket && bucket.length > 0) ?
            "cori-risi-apps" :
            bucket.toString();
        return (!!container_name && container_name.length > 0) ?
            (await (0, S3ListData_1.default)(Bucket, container_name.toString())) :
            (await (0, S3ListData_1.default)(Bucket));
    }
};
exports.default = s3_list_data;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfbGlzdF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL0Bjb3JpLXJpc2kvc2NoZW1hL3F1ZXJpZXMvczMvczNfbGlzdF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXlHO0FBQ3pHLHdEQUF5RjtBQUN6Rix1Q0FBeUM7QUFDekMsNkNBQXNDO0FBRXRDLE1BQU0sWUFBWSxHQUFHO0lBQ2pCLElBQUksRUFBRSxJQUFJLHdCQUFpQixDQUFDO1FBQ3hCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksMkJBQU8sQ0FBQyxJQUFJLHdCQUFJLENBQUMsSUFBSSwyQkFBTyxDQUFDLGtCQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFVLEVBQUUsRUFBRSw2Q0FBNkM7WUFDN0MscUNBQXFDO1lBQ3JDLDJDQUEyQztZQUN2RSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsb0JBQWEsRUFBRTtTQUNoQyxDQUFDO0tBQ0wsQ0FBQztJQUNGLElBQUksRUFBRTtRQUNGLE1BQU0sRUFBRTtZQUNKLElBQUksRUFBRSxvQkFBYSxDQUFDLGtDQUFrQztTQUN6RDtRQUNELGNBQWMsRUFBRTtZQUNaLElBQUksRUFBRSxvQkFBYTtTQUN0QjtLQUNKO0lBQ0QsT0FBTyxFQUFFLEtBQUssRUFDWixDQUFNLEVBQ04sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUd2QixFQUNELEVBQ0ksV0FBVyxFQUFFLEVBQ1QsT0FBTyxFQUNQLFlBQVksRUFDZixFQUNDLEVBQ04sSUFBUyxFQUNULEVBQUU7UUFFQSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFO1lBQ2pDLE9BQU87WUFDUCxZQUFZO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsWUFBWTtRQUNaLDhCQUE4QjtRQUM5QixrQkFBa0I7UUFDbEIsbUJBQW1CO1FBQ25CLE1BQU07UUFFTixNQUFNLE1BQU0sR0FBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzlDLGdCQUFnQixDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXBCLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUNyRCxDQUFDLE1BQU0sSUFBQSxvQkFBVSxFQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsQ0FBQyxNQUFNLElBQUEsb0JBQVUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRWpDLENBQUM7Q0FDSixDQUFDO0FBRUYsa0JBQWUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTEJvb2xlYW4sIEdyYXBoUUxJbnQsIEdyYXBoUUxMaXN0LCBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTFN0cmluZyB9IGZyb20gXCJncmFwaHFsL3R5cGVcIjtcbmltcG9ydCB7IEdyYXBoUUxMaXN0IGFzIExpc3QsIEdyYXBoUUxOb25OdWxsIGFzIE5vbk51bGwgfSBmcm9tIFwiZ3JhcGhxbC90eXBlL2RlZmluaXRpb25cIjtcbmltcG9ydCB7IEpTT05PYmplY3QgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCBTM0xpc3REYXRhIGZyb20gXCIuL1MzTGlzdERhdGFcIjtcblxuY29uc3QgczNfbGlzdF9kYXRhID0ge1xuICAgIHR5cGU6IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICAgIG5hbWU6ICdTM0xpc3REYXRhJyxcbiAgICAgICAgZmllbGRzOiAoKSA9PiAoe1xuICAgICAgICAgICAgbGlzdDogeyB0eXBlOiBuZXcgTm9uTnVsbChuZXcgTGlzdChuZXcgTm9uTnVsbChKU09OT2JqZWN0KSkpIH0sXG4gICAgICAgICAgICB0ZXN0OiB7IHR5cGU6IEpTT05PYmplY3QgfSwgLy8gPC0tIG9iamVjdCBjb250YWluaW5nIHJlc3VsdHMgb2YgYWxsIHRlc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0tIHJ1biBieSB0aGUgcmVzb2x2ZXIgc3RvcmVkIGFzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtLSB7IFwidGVzdCBkZXNjcmlwdGlvblwiOiB0cnVlIHwgZmFsc2UgfVxuICAgICAgICAgICAgdHlwZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH1cbiAgICAgICAgfSlcbiAgICB9KSxcbiAgICBhcmdzOiB7XG4gICAgICAgIGJ1Y2tldDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyAvL25ldyBHcmFwaFFMTGlzdChHcmFwaFFMU3RyaW5nKSEsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRhaW5lcl9uYW1lOiB7XG4gICAgICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlc29sdmU6IGFzeW5jIChcbiAgICAgIF86IGFueSxcbiAgICAgIHsgYnVja2V0LCBjb250YWluZXJfbmFtZSB9OiB7XG4gICAgICAgICAgYnVja2V0OiBzdHJpbmcsXG4gICAgICAgICAgY29udGFpbmVyX25hbWU6IHN0cmluZ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgICBkYXRhU291cmNlczoge1xuICAgICAgICAgICAgICByZXN0QXBpLFxuICAgICAgICAgICAgICBzM0RhdGFTb3VyY2VcbiAgICAgICAgICB9XG4gICAgICB9OiBhbnksXG4gICAgICBpbmZvOiBhbnlcbiAgICApID0+ICB7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJSZXNvbHZlIFMzTGlzdERhdGEuLi5cIiwge1xuICAgICAgICAgICAgcmVzdEFwaSxcbiAgICAgICAgICAgIHMzRGF0YVNvdXJjZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZXR1cm4gKHtcbiAgICAgICAgLy8gICAgIFwidHlwZVwiOiBcInMzX2xpc3RfZGF0YVwiLFxuICAgICAgICAvLyAgICAgXCJsaXN0XCI6IFtdLFxuICAgICAgICAvLyAgICAgXCJ0ZXN0XCI6IHRlc3RcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgY29uc3QgQnVja2V0ID0gICghIWJ1Y2tldCAmJiBidWNrZXQubGVuZ3RoID4gMCk/XG4gICAgICAgICAgXCJjb3JpLXJpc2ktYXBwc1wiIDpcbiAgICAgICAgICBidWNrZXQudG9TdHJpbmcoKTtcblxuICAgICAgICByZXR1cm4gKCEhY29udGFpbmVyX25hbWUgJiYgY29udGFpbmVyX25hbWUubGVuZ3RoID4gMCk/XG4gICAgICAgICAgKGF3YWl0IFMzTGlzdERhdGEoQnVja2V0LCBjb250YWluZXJfbmFtZS50b1N0cmluZygpKSkgOlxuICAgICAgICAgIChhd2FpdCBTM0xpc3REYXRhKEJ1Y2tldCkpO1xuXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgczNfbGlzdF9kYXRhO1xuIl19