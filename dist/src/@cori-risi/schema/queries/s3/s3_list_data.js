"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("graphql/type");
const types_1 = require("../../types");
const S3ListData_1 = require("./S3ListData");
const s3_list_data = {
    type: new type_1.GraphQLObjectType({
        name: 'S3ListData',
        fields: () => ({
            list: { type: new type_1.GraphQLNonNull(new type_1.GraphQLList(new type_1.GraphQLNonNull(types_1.JSONObject))) },
            test: { type: types_1.JSONObject }, // <-- object containing results of all tests
            // <-- run by the resolver stored as:
            // <-- { "test description": true | false }
            type: { type: type_1.GraphQLString }
        })
    }),
    args: {
        bucket: {
            type: type_1.GraphQLString //new GraphQLList(GraphQLString)!,
        },
        container_name: {
            type: type_1.GraphQLString
        }
    },
    resolve: async (_, { bucket, container_name }, { dataSources //: { restApi, s3DataSource }
     }, info) => {
        // console.log("Resolve S3ListData...", {
        //     restApi,
        //     s3DataSource
        // });
        // return ({
        //     "type": "s3_list_data",
        //     "list": [],
        //     "test": test
        // });
        const Bucket = (!!bucket && bucket.length > 0) ?
            bucket :
            "cori-risi-apps";
        console.log("BUCKET:", Bucket);
        console.log("bucket:", bucket);
        console.log("container_name:", container_name);
        return (!!container_name && container_name.length > 0) ?
            (await (0, S3ListData_1.default)(Bucket, container_name)) :
            (await (0, S3ListData_1.default)(Bucket));
    }
};
exports.default = s3_list_data;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfbGlzdF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL0Bjb3JpLXJpc2kvc2NoZW1hL3F1ZXJpZXMvczMvczNfbGlzdF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXlIO0FBQ3pILHVDQUF5QztBQUN6Qyw2Q0FBc0M7QUFFdEMsTUFBTSxZQUFZLEdBQUc7SUFDakIsSUFBSSxFQUFFLElBQUksd0JBQWlCLENBQUM7UUFDeEIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDWCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxxQkFBYyxDQUFFLElBQUksa0JBQVcsQ0FBQyxJQUFJLHFCQUFjLENBQUUsa0JBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyRixJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQVUsRUFBRSxFQUFFLDZDQUE2QztZQUM3QyxxQ0FBcUM7WUFDckMsMkNBQTJDO1lBQ3ZFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxvQkFBYSxFQUFFO1NBQ2hDLENBQUM7S0FDTCxDQUFDO0lBQ0YsSUFBSSxFQUFFO1FBQ0YsTUFBTSxFQUFFO1lBQ0osSUFBSSxFQUFFLG9CQUFhLENBQUMsa0NBQWtDO1NBQ3pEO1FBQ0QsY0FBYyxFQUFFO1lBQ1osSUFBSSxFQUFFLG9CQUFhO1NBQ3RCO0tBQ0o7SUFDRCxPQUFPLEVBQUUsS0FBSyxFQUNaLENBQU0sRUFDTixFQUFFLE1BQU0sRUFBRSxjQUFjLEVBR3ZCLEVBQ0QsRUFDSSxXQUFXLENBQUMsNkJBQTZCO01BQ3ZDLEVBQ04sSUFBUyxFQUNULEVBQUU7UUFFQSx5Q0FBeUM7UUFDekMsZUFBZTtRQUNmLG1CQUFtQjtRQUNuQixNQUFNO1FBRU4sWUFBWTtRQUNaLDhCQUE4QjtRQUM5QixrQkFBa0I7UUFDbEIsbUJBQW1CO1FBQ25CLE1BQU07UUFFTixNQUFNLE1BQU0sR0FBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxDQUFDO1lBQ1IsZ0JBQWdCLENBQUM7UUFFbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUUvQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDckQsQ0FBQyxNQUFNLElBQUEsb0JBQVUsRUFBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLENBQUMsTUFBTSxJQUFBLG9CQUFVLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVqQyxDQUFDO0NBQ0osQ0FBQztBQUVGLGtCQUFlLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxCb29sZWFuLCBHcmFwaFFMSW50LCBHcmFwaFFMTGlzdCwgR3JhcGhRTE5vbk51bGwsIEdyYXBoUUxPYmplY3RUeXBlLCBHcmFwaFFMU3RyaW5nIH0gZnJvbSBcImdyYXBocWwvdHlwZVwiO1xuaW1wb3J0IHsgSlNPTk9iamVjdCB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IFMzTGlzdERhdGEgZnJvbSBcIi4vUzNMaXN0RGF0YVwiO1xuXG5jb25zdCBzM19saXN0X2RhdGEgPSB7XG4gICAgdHlwZTogbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgICAgbmFtZTogJ1MzTGlzdERhdGEnLFxuICAgICAgICBmaWVsZHM6ICgpID0+ICh7XG4gICAgICAgICAgICBsaXN0OiB7IHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbCAobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbCAoSlNPTk9iamVjdCkpKSB9LFxuICAgICAgICAgICAgdGVzdDogeyB0eXBlOiBKU09OT2JqZWN0IH0sIC8vIDwtLSBvYmplY3QgY29udGFpbmluZyByZXN1bHRzIG9mIGFsbCB0ZXN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtLSBydW4gYnkgdGhlIHJlc29sdmVyIHN0b3JlZCBhczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LS0geyBcInRlc3QgZGVzY3JpcHRpb25cIjogdHJ1ZSB8IGZhbHNlIH1cbiAgICAgICAgICAgIHR5cGU6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9XG4gICAgICAgIH0pXG4gICAgfSksXG4gICAgYXJnczoge1xuICAgICAgICBidWNrZXQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcgLy9uZXcgR3JhcGhRTExpc3QoR3JhcGhRTFN0cmluZykhLFxuICAgICAgICB9LFxuICAgICAgICBjb250YWluZXJfbmFtZToge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZ1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZXNvbHZlOiBhc3luYyAoXG4gICAgICBfOiBhbnksXG4gICAgICB7IGJ1Y2tldCwgY29udGFpbmVyX25hbWUgfToge1xuICAgICAgICAgIGJ1Y2tldDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGNvbnRhaW5lcl9uYW1lOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICAgZGF0YVNvdXJjZXMgLy86IHsgcmVzdEFwaSwgczNEYXRhU291cmNlIH1cbiAgICAgIH06IGFueSxcbiAgICAgIGluZm86IGFueVxuICAgICkgPT4gIHtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlJlc29sdmUgUzNMaXN0RGF0YS4uLlwiLCB7XG4gICAgICAgIC8vICAgICByZXN0QXBpLFxuICAgICAgICAvLyAgICAgczNEYXRhU291cmNlXG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIHJldHVybiAoe1xuICAgICAgICAvLyAgICAgXCJ0eXBlXCI6IFwiczNfbGlzdF9kYXRhXCIsXG4gICAgICAgIC8vICAgICBcImxpc3RcIjogW10sXG4gICAgICAgIC8vICAgICBcInRlc3RcIjogdGVzdFxuICAgICAgICAvLyB9KTtcblxuICAgICAgICBjb25zdCBCdWNrZXQgPSAgKCEhYnVja2V0ICYmIGJ1Y2tldC5sZW5ndGggPiAwKT9cbiAgICAgICAgICBidWNrZXQgOlxuICAgICAgICAgIFwiY29yaS1yaXNpLWFwcHNcIjtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIkJVQ0tFVDpcIiwgQnVja2V0KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJidWNrZXQ6XCIsIGJ1Y2tldCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29udGFpbmVyX25hbWU6XCIsIGNvbnRhaW5lcl9uYW1lKTtcblxuICAgICAgICByZXR1cm4gKCEhY29udGFpbmVyX25hbWUgJiYgY29udGFpbmVyX25hbWUubGVuZ3RoID4gMCk/XG4gICAgICAgICAgKGF3YWl0IFMzTGlzdERhdGEoQnVja2V0LCBjb250YWluZXJfbmFtZSkpIDpcbiAgICAgICAgICAoYXdhaXQgUzNMaXN0RGF0YShCdWNrZXQpKTtcblxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHMzX2xpc3RfZGF0YTtcbiJdfQ==