"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const json_1 = require("./json");
function coerceCoordinates(value) {
    return value;
}
function parseCoordinates(valueAST) {
    return valueAST.value;
}
const GeoJSON = {
    TypeEnum: new graphql_1.GraphQLEnumType({
        name: 'GeoJSONType',
        description: 'Enumeration of all GeoJSON object types.',
        values: {
            Point: { value: 'Point' },
            MultiPoint: { value: 'MultiPoint' },
            LineString: { value: 'LineString' },
            MultiLineString: { value: 'MultiLineString' },
            Polygon: { value: 'Polygon' },
            MultiPolygon: { value: 'MultiPolygon' },
            GeometryCollection: { value: 'GeometryCollection' },
            Feature: { value: 'Feature' },
            FeatureCollection: { value: 'FeatureCollection' },
        },
    }),
    CoordinatesScalar: new graphql_1.GraphQLScalarType({
        name: 'GeoJSONCoordinates',
        description: 'A (multidimensional) set of coordinates following x, y, z order.',
        serialize: coerceCoordinates,
        parseValue: coerceCoordinates,
        parseLiteral: parseCoordinates,
    }),
    JSONObject: json_1.JSONObject,
    PointObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONPoint',
        description: 'Object describing a single geographical point.',
        interfaces: () => [GeoJSON.GeoJSONInterface, GeoJSON.GeometryInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
    }),
    MultiPointObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONMultiPoint',
        description: 'Object describing multiple geographical points.',
        interfaces: () => [GeoJSON.GeoJSONInterface, GeoJSON.GeometryInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
    }),
    LineStringObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONLineString',
        description: 'Object describing a single connected sequence of geographical points.',
        interfaces: () => [GeoJSON.GeoJSONInterface, GeoJSON.GeometryInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
    }),
    MultiLineStringObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONMultiLineString',
        description: 'Object describing multiple connected sequences of geographical points.',
        interfaces: () => [GeoJSON.GeoJSONInterface, GeoJSON.GeometryInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
    }),
    PolygonObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONPolygon',
        description: 'Object describing a single shape formed by a set of geographical points.',
        interfaces: () => [GeoJSON.GeoJSONInterface, GeoJSON.GeometryInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
    }),
    MultiPolygonObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONMultiPolygon',
        description: 'Object describing multiple shapes formed by sets of geographical points.',
        interfaces: () => [GeoJSON.GeoJSONInterface, GeoJSON.GeometryInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
    }),
    GeometryCollectionObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONGeometryCollection',
        description: 'A set of multiple geometries, possibly of various types.',
        interfaces: () => [GeoJSON.GeoJSONInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            geometries: { type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(GeoJSON.GeometryInterface))) },
        }),
    }),
    FeatureObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONFeature',
        description: 'An object that links a geometry to properties in order to provide context.',
        interfaces: () => [GeoJSON.GeoJSONInterface],
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            geometry: { type: GeoJSON.GeometryInterface },
            properties: { type: GeoJSON.JSONObject },
            id: { type: graphql_1.GraphQLString },
        }),
    }),
    FeatureCollectionObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONFeatureCollection',
        description: 'A set of multiple features.',
        interfaces: () => [GeoJSON.GeoJSONInterface],
        fields: () => ({
            // id: { type: Str },
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            features: { type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(GeoJSON.FeatureObject))) },
        }),
    }),
    CRSTypeEnum: new graphql_1.GraphQLEnumType({
        name: 'GeoJSONCRSType',
        description: 'Enumeration of all GeoJSON CRS object types.',
        values: {
            name: { value: 'name' },
            link: { value: 'link' },
        },
    }),
    NamedCRSPropertiesObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONNamedCRSProperties',
        description: 'Properties for name based CRS object.',
        fields: () => ({
            name: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
        }),
    }),
    LinkedCRSPropertiesObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONLinkedCRSProperties',
        description: 'Properties for link based CRS object.',
        fields: () => ({
            href: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
            type: { type: graphql_1.GraphQLString },
        }),
    }),
    CRSPropertiesUnion: new graphql_1.GraphQLUnionType({
        name: 'GeoJSONCRSProperties',
        description: 'CRS object properties.',
        types: () => [GeoJSON.NamedCRSPropertiesObject, GeoJSON.LinkedCRSPropertiesObject],
        resolveType: value => {
            if (value.name) {
                return GeoJSON.NamedCRSPropertiesObject;
            }
            if (value.href) {
                return GeoJSON.LinkedCRSPropertiesObject;
            }
        },
    }),
    CoordinateReferenceSystemObject: new graphql_1.GraphQLObjectType({
        name: 'GeoJSONCoordinateReferenceSystem',
        description: 'Coordinate Reference System (CRS) object.',
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.CRSTypeEnum) },
            properties: { type: new graphql_1.GraphQLNonNull(GeoJSON.CRSPropertiesUnion) },
        }),
    }),
    GeoJSONInterface: new graphql_1.GraphQLInterfaceType({
        name: 'GeoJSONInterface',
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
        }),
        resolveType: value => GeoJSON[`${value.type}Object`],
    }),
    GeometryInterface: new graphql_1.GraphQLInterfaceType({
        name: 'GeoJSONGeometryInterface',
        fields: () => ({
            type: { type: new graphql_1.GraphQLNonNull(GeoJSON.TypeEnum) },
            crs: { type: GeoJSON.CoordinateReferenceSystemObject },
            bbox: { type: new graphql_1.GraphQLList(graphql_1.GraphQLFloat) },
            coordinates: { type: GeoJSON.CoordinatesScalar },
        }),
        resolveType: value => GeoJSON[`${value.type}Object`].name,
        // resolveType: value => value.type,
    }),
    GeometryTypeUnion: new graphql_1.GraphQLUnionType({
        name: 'GeoJSONGeometryTypes',
        description: 'Geometry Types',
        types: () => [
            GeoJSON.PointObject,
            GeoJSON.MultiLineStringObject,
            GeoJSON.LineStringObject,
            GeoJSON.PolygonObject,
            GeoJSON.MultiPointObject,
            GeoJSON.MultiPolygonObject,
        ],
        resolveType: value => {
            if (value.value === GeoJSON.TypeEnum.Point.value) {
                return GeoJSON.PointObject.name;
            }
            if (value.value === GeoJSON.TypeEnum.MultiLineString.value) {
                return GeoJSON.MultiLineStringObject.name;
            }
            if (value.value === GeoJSON.TypeEnum.LineString.value) {
                return GeoJSON.LineStringObject.name;
            }
            if (value.value === GeoJSON.TypeEnum.MultiPoint.value) {
                return GeoJSON.MultiPointObject.name;
            }
            if (value.value === GeoJSON.TypeEnum.Polygon.value) {
                return GeoJSON.PolygonObject.name;
            }
            if (value.value === GeoJSON.TypeEnum.MultiPolygon.value) {
                return GeoJSON.MultiPolygonObject.name;
            }
            if (value.value === GeoJSON.TypeEnum.MultiPoint.value) {
                return GeoJSON.MultiPointObject.name;
            }
        },
    }),
};
exports.default = GeoJSON;
//# sourceMappingURL=data:application/json;base64,